-----------------------------------------MONGODB----------------------------------------------------------
MongoDB is a cross-platform, document oriented database that provides, high performance, high availability, and easy scalability. MongoDB works on concept of collection and document.
----------------------------------------------------------------------------

+-------------------------------------------------------------------------------------+
|	RDBMS         |     MONGODB                                                   |
+-------------------------------------------------------------------------------------+
|	Database      |	    Database                                                  |
|	Table         |     Collection                                                |
|	Row           |     Document                                                  |
|	column        |	    Field         					      |
|	Table Join    |	    Embedded Documents					      |
|	Primary Key   |	    Primary Key (Default key _id provided by MongoDB itself)  |
+-------------------------------------------------------------------------------------+

Data Model Design:
MongoDB provides two types of data models: 
â€” Embedded data model.(In this model, you can have all the related data in a single document, it is also known as de-normalized data model.)
_ Normalized data model.(In this model, you can refer the sub documents in the original document, using references. For example, you can re-write the above document in the normalized model)
-----------------------------------------------------------------------------
---> mongo
---> mongo -port=23171
---> show dbs
-----------------------------------------------------------------------------

Create Database
----------------
MongoDB use DATABASE_NAME is used to create database.
>use mycustomers
------------------------------------------------

Drop Database
--------------
>db.dropDatabase();	
------------------------------------------------

Create collections
--------------------
> db.createCollection('customers');
-----------------------------------------------

Drop collections
-----------------
> db.customers.drop();
-----------------------------------------------

Display collections
-------------------
> show collections
customers
-----------------------------------------------

Insert Document
-------------
> db.customers.insert({first_name:"john", last_name:"snow"});
db.products.insert({productid: 1, productname: "Note 5 Pro", productcategory: "Redmi", 	productprice: 15000, available: "true", rating : 4});
db.products.insert({productid: 2, productname: "Iphone 12 Pro", productcategory: "Apple", 	productprice: 100000, available: "true", rating : 5});
--->to insert single
> db.mycol.tutorial([
	{
		title: "MongoDB Overview",
		description: "MongoDB is no SQL database",
		by: "tutorials point",
		url: "http://www.tutorialspoint.com",
		tags: ["mongodb", "database", "NoSQL"],
		likes: 100
	},
	{
		title: "NoSQL Database",
		description: "NoSQL database doesn't have tables",
		by: "tutorials point",
		url: "http://www.tutorialspoint.com",
		tags: ["mongodb", "database", "NoSQL"],
		likes: 20,
		comments: [
			{
				user:"user1",
				message: "My first comment",
				dateCreated: new Date(2013,11,10,2,35),
				like: 0
			}
		]
	}
])
--->to insert many
db.customers.insertMany( [
   { bikeName: "NS200", instock: [ { warehouse: "A", qty: 5 }, { warehouse: "C", qty: 15 } ] },
   { bikeName: "RS200", instock: [ { warehouse: "C", qty: 5 } ] },	
   { bikeName: "R15", instock: [ { warehouse: "F", qty: 60 }, { warehouse: "Y", qty: 15 } ] },
   { bikeName: "FZ15O", instock: [ { warehouse: "H", qty: 40 }, { warehouse: "X", qty: 5 } ] },
   { bikeName: "RTR", instock: [ { warehouse: "M", qty: 15 }, { warehouse: "N", qty: 35 } ] }
]);
-------------------------------------------------

Query Document
--------------
> db.customers.find();
> db.customers.find().pretty();

findOne() method, that returns only one document.
> db.customers.findOne({"item" : "planner"});

To query documents based on the AND condition, you need to use $and keyword.
> db.tutorial.find({$and:[{"title" : "MongoDB Overview"},{"by" : "tutorials point"}] }).pretty();

To query documents based on the OR condition, you need to use $or keyword
> db.tutorial.find({$or:[{"by":"tutorials point"},{"title": "MongoDB Overview"}]}).pretty()

where likes>50 AND (by = 'tutorials point' OR title = 'MongoDB Overview')'
> db.tutorial.find({"likes": {$gt:50}, $or: [{"by": "tutorials point"},{"title": "MongoDB Overview"}]}).pretty();

where likes<50 AND (by = 'tutorials point' OR title = 'MongoDB Overview')'
> db.tutorial.find({"likes": {$lt:50}, $or: [{"by": "tutorials point"},{"title": "MongoDB Overview"}]}).pretty();

> db.tutorial.find({ "Age": { $not: { $gt: "25" } } });
-----------------------------------------------------

Update Document
---------------

> db.tutorial.updateOne({bikeName:"NS200"},{$set:{"Available": True}});
> db.customers.updateMany({first_name:"john"},{$inc:{age:5}});
---> to remove only age 
> db.customers.update({first_name:"john"},{$unset:{age:1}});
---> to add only age
> db.customers.update({first_name:"john"},{$set:{age:1}});
$set, $unset	
---> upsert is used to insert a record using update cmd.
upseRT = true
------------------------------------------------------

Delete Document
---------------

Following example will remove all the documents whose title is 'MongoDB Overview'.
>db.customers.remove({"bikeName": "R15"})

Remove All Documents
> db.mycol.remove({})
---------------------------------------------------

Projection
----------

> db.tutorial.find({},{"title":1,_id:0});
> db.tutorial.find().limit(2).pretty();

-->to sort first_name in assecending order
> db.customers.find().sort({first_name:1,item:1});
> db.getCollection('customers').find().sort({first_name:-1})

-->to sort first_name in desecending order
> db.customers.find().sort({first_name:-1,item:-1});
----------------------------------------------------

MongoDB - Aggregation
---------------------

>>db.COLLECTION_NAME.aggregate(AGGREGATE_OPERATION)
Group:
-----
>db.tutorial.aggregate([{$group : {_id : "$by_user", num_tutorial : {$sum : 1}}}])
>db.getCollection('test').aggregate([{$group : {_id:"$by_user", num_tutorial:{$sum : 1}}}]);
project:
-------	
>db.getCollection('test').aggregate([{$project : { title :1, by_user:1}}]);
Sql equivalent query for the above use case will be select by_user, count(*) from mycol group by by_user.

{ "_id" : "tutorials point", "num_tutorial" : 2 }
{ "_id" : "Neo4j", "num_tutorial" : 1 }

=====================================================================
==============================================db.getCollection('customers').aggregate([{$group : {_id:{first:"$first_name",{gen:"$gender"}},count:{$sum : 1}}}}]);=======================
=====================================================================
Rough codes:

| | | |
V V V V


---> mongo
---> mongo -port=23171
---> show dbs
--->use mycustomers


----<create user>------
db.createuser({
	user:"deepak" ,
	pwd: "12345",
	roles: ["readWrite", "dbAdmin"]
});

------<create collections>------
> db.createCollection('customers');
{ "ok" : 1 }

------<To display collections>-------
> show collections
customers

------<To insert value inside collection>-------
db.customers.insert({first_name:"john", last_name:"snow"});

------<To display collection >---------------
> db.customers.find();
{ "_id" : ObjectId("5f5bc39bb71cfc344b64e812"), "first_name" : "john", "last_name" : "snow" }
 db.customers.update({first_name:"john"},{$unset:{age:1}});
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })

------<To display collection in just pretty format>---------------
db.customers.find().pretty();
{
	"_id" : ObjectId("5f5bc39bb71cfc344b64e812"),
	"first_name" : "john",
	"last_name" : "snow"
}
{
	"_id" : ObjectId("5f5bc4f1b71cfc344b64e813"),
	"first_name" : "steven",
	"last_name" : "smith"
}
{
	"_id" : ObjectId("5f5bc4f1b71cfc344b64e814"),
	"first_name" : "john",
	"last_name" : "wick",
	"gender" : "male"
}


------<To update >---------------
> db.customers.update({first_name:"steven"},{first_name:"steve", last_name:"smith", gender:"male"});
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })


------<To update all>-------------
> db.customers.updateMany({first_name:"john"},{$inc:{age:5}});
{ "acknowledged" : true, "matchedCount" : 2, "modifiedCount" : 2 }


> db.customers.find().pretty();
{
	"_id" : ObjectId("5f5bc39bb71cfc344b64e812"),
	"first_name" : "john",
	"last_name" : "snow",
	"gender" : "male",
	"age" : 55
}
{
	"_id" : ObjectId("5f5bc4f1b71cfc344b64e813"),
	"first_name" : "steve",
	"last_name" : "smith",
	"gender" : "male"
}
{
	"_id" : ObjectId("5f5bc4f1b71cfc344b64e814"),
	"first_name" : "john",
	"last_name" : "wick",
	"gender" : "male",
	"age" : 5
}

---> to remove only age 
>db.customers.update({first_name:"john"},{$unset:{age:1}});
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
--->to add only age
>db.customers.update({first_name:"john"},{$set:{age:1}});
$set, $unset	
---> upsert is used to insert a record using update cmd.
upseRT = true

--->to insert single
db.customers.insert({first_name:"sai", last_name:"rithik", address:[{street: "4 main st", city:"chennai"},{pincode: "600054"}]});
--->to insert many
db.customers.insertMany( [
   { item: "journal", instock: [ { warehouse: "A", qty: 5 }, { warehouse: "C", qty: 15 } ] },
   { item: "notebook", instock: [ { warehouse: "C", qty: 5 } ] },
   { item: "paper", instock: [ { warehouse: "A", qty: 60 }, { warehouse: "B", qty: 15 } ] },
   { item: "planner", instock: [ { warehouse: "A", qty: 40 }, { warehouse: "B", qty: 5 } ] },
   { item: "postcard", instock: [ { warehouse: "B", qty: 15 }, { warehouse: "C", qty: 35 } ] }
]);


db.customers.find( { "instock": { warehouse: "A", qty: 5 } } )
> db.customers.find( { "instock": { warehouse: "A", qty: 5 } } ).pretty();
{
	"_id" : ObjectId("5f5f2217fd1cbb3075be1afd"),
	"item" : "journal",
	"instock" : [
		{
			"warehouse" : "A",
			"qty" : 5
		},
		{
			"warehouse" : "C",
			"qty" : 15
		}
	]
}

The following example selects all documents where the instock array has at least one embedded document that contains the field qty whose value is less than or equal to 20:
db.customers.find( { 'address.city': { $lte: "Botson" } } ).pretty();
{
	"_id" : ObjectId("5f5f1f88fd1cbb3075be1afc"),
	"first_name" : "Dina",
	"last_name" : "Dinesh",
	"address" : {
		"street" : "4 main st",
		"city" : "Boston"
	}
}
db.inventory.find( { 'instock.qty': { $lte: 20 } } )


> db.customers.remove({first_name:"Dina"});
WriteResult({ "nRemoved" : 1 })

--> to delete collection
> db.customer.drop();
true

>> db.customers.find( { "instock": { $elemMatch: { qty: 5, warehouse: "A" } } } ).pretty();
{
	"_id" : ObjectId("5f5f2217fd1cbb3075be1afd"),
	"item" : "journal",
	"instock" : [
		{
			"warehouse" : "A",
			"qty" : 5
		},
		{
			"warehouse" : "C",
			"qty" : 15
		}
	]
}

-->to sort first_name in assecending order
> db.customers.find().sort({first_name:1,item:1});

-->to sort first_name in desecending order
> db.customers.find().sort({first_name:-1,item:-1});

https://www.youtube.com/watch?v=dX835axhfK8&list=PLEUZTtBNFnBgJ7W93sGucH8aJ-HYQdT6O&ab_channel=TheITGuy

https://www.youtube.com/watch?v=pWbMrx5rVBE&ab_channel=TraversyMedia


====================================================================================================================
====================================================================================================================
====================================================================================================================


UST 
to craete object manually --> "_id"


 db.flightData.insertOne({"departureAirport" :"TXL", "arrivalAirport" : "MVC", "_id": "tsvcd_ert_tju"});
{ "acknowledged" : true, "insertedId" : "tsvcd_ert_tju" }
> db.flightData.find().pretty();
{
        "_id" : ObjectId("5fd092e4a0ae4c65a31710c5"),
        "departreAirport" : "MVC",
        "arrivalAirport" : "SFO",
        "aircraftAirport" : "Airbus A380",
        "distance" : 12000,
        "intercontinental" : true
}
{
        "_id" : "tsvcd_ert_tju",
        "departureAirport" : "TXL",
        "arrivalAirport" : "MVC"
}
>
====================================================
delete one:

 db.flightData.deleteOne({departureAirport : "TXL"});
{ "acknowledged" : true, "deletedCount" : 1 }
====================================================
updateOne:

db.flightData.updateOne({distance : 12000}, {$set: {"time" : 12}});

update many:

> db.flightData.updateMany({arrivalAirport : "SFO"}, {$set: {"firstClass" : "available", "secondClass" : "available"}});
{ "acknowledged" : true, "matchedCount" : 2, "modifiedCount" : 2 }

update:
without dollor symbol we can update but it will create new object
====================================================

delete:

deleteMany:

====================================================
finding the time greater than 9

db.flightData.find({time: {$gt : 9}}).pretty();

> db.flightData.find({},{departureAirport : 1, _id : 0}).toArray();
====================================================

replaceOne:

> db.flightData.replaceOne({"_id" : ObjectId("5fd092e4a0ae4c65a31710c5")},{"departreAirport" : "MVC", "arrivalAirport" : "SFO",  "aircraftAirport" : "Airbus A380","distance" : 12000,"intercontinental" : true});
{ "acknowledged" : true, "matchedCount" : 1, "modifiedCount" : 1 }
